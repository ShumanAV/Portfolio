package LambdaExpressions;

interface Executable {
    int execute(int x, int y);
}

class Runner {
    public void run(Executable e) {
        int a = e.execute(10, 15);
        System.out.println(a);
    }
}

public class Lambda {

    public static void main(String[] args) {

        /*
        лямбда - это выражения, которые позволяют передать кусок кода в метод или
                позволяют обойтись без использования анонимных классов, нового функционала в язык не привносят
        () - в скобках поставляются аргументы в лямбда выражение, сейчас нет аргументов, т.к. метод run() в интерфейсе Runnable не принимает никаких аргументов
        -> - после этого знака идет тело лямбда выражения (ЛВ)
        Thread thread = new Thread(() -> System.out.println(""));
        если в теле ЛВ одна строка, то пишется просто, если больше то тело пишется в {...}
        ЛВ можно использовать только тогда, когда в анонимном классе есть только один нереализованный метод
         */

        Runner runner = new Runner();
        int a = 1;

        // в методе есть своя область видимости, в этом отличия  от лямбды
        runner.run(new Executable() {
            @Override
            public int execute(int x, int y) {
//                System.out.println("Hello");
//                System.out.println("Goodbye");
                int a = 2;          // можно создать такую же переменную как и во вне
                return x + y;
            }
        });

        // в ЛВ мы не указываем тип возвращаемого значения, java это видит по сигнатуре метода в интерфейсе
        // если в одну строку то можно не указывать слово return runner.run(() -> 5);

        // если в лямбду передаем внешнюю переменную, она должна быть либо final, либо после инициализации больше не изменяться
        // у ЛВ нет своей области видимости - scope, в ЛВ видны все внешние доступные переменные
        // в ЛВ можно создавать свои переменные
        runner.run((x, y) -> {
                int b = 10;
                return x + y + a + b;
        });

    }

}
